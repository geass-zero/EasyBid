{"version":3,"sources":["utils/Web3.js","utils/Accounts.js","utils/Contracts.js","components/Home.js","components/Routes.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["createInstance","a","providerOptions","createProviderOptions","web3Modal","createModal","provider","connect","console","log","web3","Web3","eth","getAccounts","accounts","setGlobals","walletconnect","package","WalletConnectProvider","options","infuraId","Web3Modal","network","cacheProvider","theme","background","main","secondary","border","hover","getInstance","web3Instance","getGlobal","setGlobal","getCurrentAccount","Web3Util","getEasyBidContractInstance","window","easyBidCI","instance","Contract","EasyBid","abi","getERCContractInstance","address","ercCI","ERC20","getETHAllowance","Accounts","account","methods","call","ethAllowance","startSwap","token","ethUsed","profitLoss","createBid","send","from","getTokenName","name","Home","state","loaded","currentArea","allowance","ethToUse","endToken","endAddress","handleClick","props","toggle","myAllowance","Contracts","setEndToken","e","target","value","setState","sendSwap","utils","toWei","toString","componentDidMount","setArea","error","alert","area","document","getElementById","this","classList","remove","add","className","onClick","id","type","placeholder","onChange","setETHUsed","bind","setProfitLoss","Component","Routes","useGlobal","exact","path","component","Header","useState","setAccount","useEffect","init","to","substring","length","App","Container","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dfe94c81.chunk.js","sourcesContent":["//import Web3 from \"web3\";\r\n//https://github.com/CharlesStover/reactn\r\nimport Web3 from \"web3\";\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { setGlobal, getGlobal } from 'reactn';\r\n\r\n\r\n /**\r\n  * Check to see if there's a web3 instance to use\r\n  */\r\n \r\nconst createInstance = async() => {\r\n\r\n  const providerOptions = createProviderOptions()\r\n  const web3Modal = createModal(providerOptions)\r\n  \r\n  // check if current instance is present\r\n  let provider = false;\r\n    try {\r\n      provider = await web3Modal.connect();\r\n    } catch (exception){\r\n      console.log('exception thrown while instantiating web3modal');\r\n      console.log(exception)\r\n      return false\r\n    }\r\n\r\n    const web3 = new Web3(provider);\r\n    const accounts = await web3.eth.getAccounts();\r\n    setGlobals(web3, accounts, web3Modal);\r\n  \r\n    return web3;\r\n}\r\n\r\nconst createProviderOptions = () => {\r\n  const providerOptions = {\r\n    walletconnect: {\r\n      package: WalletConnectProvider, // required\r\n      options: {\r\n        infuraId: \"83301e4b4e234662b7769295c0f4a2e1\" // required\r\n      }\r\n    }\r\n  };\r\n  return providerOptions\r\n}\r\n\r\nconst createModal = (providerOptions) => {\r\n  const web3Modal = new Web3Modal({\r\n    network: \"mainnet\", // optional\r\n    cacheProvider: true, // optional\r\n    providerOptions, // required,\r\n    theme: {\r\n      background: \"rgb(253, 250, 250)\",\r\n      main: \"rgb(33, 37, 41)\",\r\n      secondary: \"rgb(136, 136, 136)\",\r\n      border: \"rgba(195, 195, 195, 0.14)\",\r\n      hover: \"rgb(252,163,220)\"\r\n    }\r\n  });\r\n  return web3Modal;\r\n}\r\n\r\nconst getInstance = async() => {\r\n    const web3Instance = getGlobal().web3Instance;    \r\n    if(!web3Instance){\r\n      return await createInstance();\r\n    }\r\n    return web3Instance\r\n}\r\n\r\nconst setGlobals = (web3, accounts, web3Modal) => {\r\n  setGlobal({\r\n    web3Instance: web3,\r\n    accounts: accounts,\r\n    web3Modal: web3Modal\r\n  });\r\n}\r\n\r\n// Export each function\r\nexport {\r\n  createInstance,\r\n  getInstance\r\n  //checkWeb3IsPresent,\r\n  //getAccounts,\r\n  //getNetworkId\r\n};\r\n\r\n","/** All interations with the contracts */\r\nimport Web3 from \"web3\";\r\nimport { getGlobal } from 'reactn';\r\nimport { Web3Util } from './index';\r\n\r\nconst getCurrentAccount = async() => {\r\n    const accounts = getGlobal().accounts;\r\n    if(!accounts){\r\n        let web3 = await Web3Util.getInstance()\r\n        if(web3){\r\n            let accounts = await web3.eth.getAccounts();\r\n            return accounts[0];\r\n        }\r\n    }\r\n    return accounts[0];\r\n}\r\n\r\n// Export each function\r\nexport {\r\n    getCurrentAccount\r\n };","import { Web3Util, Accounts } from './index';\r\nimport ERC20 from \"../contracts/ERC20.json\";\r\nimport EasyBid from \"../contracts/EasyBid.json\";\r\n\r\n\r\nasync function getEasyBidContractInstance(){\r\n    if(!window.easyBidCI) {\r\n        \r\n    }\r\n    const instance = await Web3Util.getInstance();\r\n    window.easyBidCI = new instance.eth.Contract(\r\n        EasyBid.abi,\r\n        \"0xEa3c336c34C34C78BC7Fa2f3D16957B8d0aE6904\"\r\n    );\r\n    return window.easyBidCI\r\n}\r\n\r\nasync function getERCContractInstance(address){\r\n    if(!window.ercCI) {\r\n        \r\n    }\r\n    const instance = await Web3Util.getInstance();\r\n        window.ercCI = new instance.eth.Contract(\r\n            ERC20.abi,\r\n            address\r\n        );\r\n    return window.ercCI\r\n}\r\n\r\nasync function getETHAllowance(){\r\n    let account = await Accounts.getCurrentAccount();\r\n    let instance = await getEasyBidContractInstance();\r\n\r\n    let ethAllowance = await instance.methods.getETHAllowance(account).call();\r\n    return ethAllowance;\r\n  }\r\n\r\nasync function startSwap(token, ethUsed, profitLoss){\r\n    let account = await Accounts.getCurrentAccount();\r\n    let instance = await getEasyBidContractInstance();\r\n    let ethAllowance = await instance.methods.createBid(\r\n        token, ethUsed, profitLoss\r\n    ).send({\r\n        from: account\r\n    });\r\n    return ethAllowance;\r\n  }\r\n\r\n  async function getTokenName(address){\r\n    let account = await Accounts.getCurrentAccount();\r\n    console.log(account);\r\n    let instance = await getERCContractInstance(address);\r\n    let name = await instance.methods.name().call();\r\n    return name;\r\n  }\r\n\r\nexport {\r\n    getEasyBidContractInstance,\r\n    getETHAllowance,\r\n    getTokenName,\r\n    startSwap\r\n}","import React, { useEffect, useState, Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Row, Col, Image, Badge } from 'react-bootstrap';\r\nimport { Web3Util, Accounts, Contracts } from '../utils/index';\r\nimport ERC20 from \"../contracts/ERC20.json\";\r\n\r\n\r\nimport Web3 from \"web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\n// import { Swap, Balances } from '../utils';\r\n\r\nexport default class Home extends Component {\r\n\r\n    state = {\r\n        loaded: false,\r\n        currentArea: \"bid\",\r\n        allowance: 0,\r\n        ethToUse: 0,\r\n        endToken: \"Enter a Token\",\r\n        endAddress: \"\",\r\n        profitLoss: 0\r\n    };\r\n      \r\n      handleClick = () => {\r\n        this.props.toggle();\r\n      };\r\n\r\n      setArea(area) {\r\n        let prevEl = document.getElementById(this.state.currentArea);\r\n        prevEl.classList.remove('n-selected');\r\n        this.setState({currentArea: area});\r\n        let el = document.getElementById(area);\r\n        el.classList.add('n-selected');\r\n      };\r\n\r\n      myAllowance = async () => {\r\n        let allowance = await Contracts.getETHAllowance();\r\n        console.log(allowance);\r\n        return allowance;\r\n      }\r\n\r\n      setETHUsed(e) {\r\n        this.setState({ethToUse: e.target.value})\r\n      }\r\n\r\n      setEndToken = async (e) => {\r\n        let name = await Contracts.getTokenName(e.target.value)\r\n        this.setState({endToken: name, endAddress: e.target.value})\r\n      }\r\n\r\n      setProfitLoss(e) {\r\n        this.setState({profitLoss: e.target.value});\r\n      }\r\n\r\n      sendSwap = async () => {\r\n        await Contracts.startSwap(\r\n          this.state.endAddress,\r\n          Web3.utils.toWei(this.state.ethToUse.toString()),\r\n          this.state.profitLoss\r\n        )\r\n      }\r\n\r\n      connect = async () => {\r\n        let instance = await Web3Util.createInstance();\r\n        if (instance) {\r\n          await Accounts.getCurrentAccount()\r\n          this.setState({allowance: await this.myAllowance()})\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n      componentDidMount = async () => {\r\n    \r\n        try {\r\n          this.connect();\r\n        //   this.web3 = getWeb3Var();\r\n            \r\n        //   // Get network provider and web3 instance.\r\n         \r\n        //   // Use web3 to get the user's accounts.\r\n        //   this.accounts = await this.web3.eth.getAccounts();\r\n        \r\n        //   // Get the contract instance.\r\n        //   this.networkId = await this.web3.eth.net.getId();\r\n    \r\n        //   this.nyanInstance = new this.web3.eth.Contract(\r\n        //     NyanToken.abi,\r\n        //     process.env.REACT_APP_NYAN_TOKEN_CONTRACT_ADDRESS\r\n        //   );\r\n         \r\n        //   this.catnipInstance = new this.web3.eth.Contract(\r\n        //     CatnipToken.abi,\r\n        //     process.env.REACT_APP_CATNIP_TOKEN_CONTRACT_ADDRESS\r\n        //   );\r\n         \r\n          \r\n          this.setArea('bid');\r\n          // Set web3, accounts, and contract to the state, and then proceed with an\r\n          // example of interacting with the contract's methods.\r\n          // console.log(await this.myAllowance);\r\n          \r\n          this.setState({loaded: true});\r\n          \r\n        } catch (error) {\r\n          // Catch any errors for any of the above operations.\r\n          alert(\r\n            `Failed to load web3, accounts, or contract. Check console for details.`,\r\n          );\r\n          console.error(error);\r\n        }\r\n      };\r\n      render() {\r\n        return (\r\n          <div>\r\n              <div className=\"nav-container\">\r\n                <div className=\"access-info\">\r\n                    ETH Allowance: {this.state.allowance}\r\n                </div>\r\n                <div onClick={() => this.setArea('bid')} id=\"bid\" className=\"option\">BID</div>\r\n                <div onClick={() => this.setArea('call')} id=\"call\" className=\"option\">CALL</div>\r\n              </div>\r\n              {this.state.currentArea === 'bid' ?\r\n                <div>\r\n                    <div className=\"swap-text\">SWAP</div>\r\n                    <div className=\"start-token-container\">\r\n                        <div className=\"start-token-info\">\r\n                            <input className=\"start-token-input\" \r\n                            type=\"number\" placeholder=\"How much\" onChange={this.setETHUsed.bind(this)}></input>\r\n                            <div className=\"start-ETH\">\r\n                                ETH\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"for-text\">FOR</div>\r\n                    <div className=\"end-token-container\">\r\n                        <div className=\"end-token-info\">\r\n                            <div className=\"end-token-input-container\">\r\n                                <input placeholder=\"Enter token's address\" \r\n                                className=\"end-token-address-container\"\r\n                                onChange={this.setEndToken.bind(this)}>\r\n\r\n                                </input>\r\n                            </div>\r\n                            {this.state.endToken}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"profit-loss-text\">Profit/Loss %</div>\r\n                    <div className=\"profit-loss-container\">\r\n                    <div className=\"profit-loss-info\">\r\n                        <input type=\"number\" \r\n                        placeholder=\"Enter amount %\" \r\n                        className=\"profit-loss-input\"\r\n                        onChange={this.setProfitLoss.bind(this)}></input>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"send-it\" onClick={() => this.sendSwap()}>Send it!</div>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <div className=\"call-info\">\r\n                        Want to make quick ETH? Nyan-2 holders with at least 1 Nyan-2 can trigger calls\r\n                        in order to get a % of the profits or losses.\r\n                    </div>\r\n                </div>\r\n              }\r\n          </div>\r\n        );\r\n      }\r\n    }","import React from \"react\";\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport Home from \"./Home\";\r\n\r\nimport { useGlobal } from 'reactn';\r\n\r\nconst Routes = (props) => {\r\n    \r\n    const [ web3Instance ] = useGlobal('web3Instance');\r\n    \r\n    return (\r\n            <div className=\"application-body\">\r\n                <Route exact path='/' component={Home}/>\r\n                <Route exact path='/app' component={Home}/>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Routes","import React, {useEffect, useState} from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Image, Nav, Navbar, Button } from 'react-bootstrap';\r\nimport { Web3Util, Accounts } from '../utils/index';\r\n\r\nimport { useGlobal } from 'reactn';\r\n\r\nimport '../style/Header.css';\r\n\r\nconst Header = (props) => {\r\n\r\n    const [ web3Instance ] = useGlobal('web3Instance');\r\n    // const [isEligibleForNyanV1toV2Swap, setIsEligibleForV1ToV2Swap] = useState(false);\r\n    // const [isLGEOver, setIsLGEOver] = useState(false);\r\n    // const [nyanBalance, setNyanBalance]  = useState(0);\r\n    let [account, setAccount] = useState(0);\r\n\r\n    // init staking page\r\n    useEffect(() => {\r\n        // only fires whenever requestConnectionToWallet is updated.\r\n        async function init() {\r\n            connect();\r\n            // setNyanBalance(await Balances.getMyNyanBalance());  \r\n            // setIsEligibleForV1ToV2Swap(true);\r\n            // setIsLGEOver(Swap.getLGEBool());\r\n            // console.log(isEligibleForNyanV1toV2Swap)\r\n            if (web3Instance) {\r\n                let account = await Accounts.getCurrentAccount();\r\n            }\r\n            \r\n        }\r\n        init()\r\n    }, []);\r\n\r\n    async function connect() {\r\n        let instance = await Web3Util.createInstance();\r\n        if (instance) {\r\n            setAccount(await Accounts.getCurrentAccount());\r\n        }\r\n    }\r\n\r\n    function disconnectWallet() {\r\n        // account = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"nav-bg\">\r\n            <Link to=\"/\" className=\"router-link\">\r\n                <h1 className=\"site-title\">easybid</h1>\r\n            </Link>\r\n\r\n            {\r\n                account ?\r\n                <div className=\"menu-icon\">\r\n                    Wallet:...{account.substring(account.length - 8)}\r\n                    <div onClick={()=> disconnectWallet()} className=\"disconnect\"></div>\r\n                </div>\r\n                :\r\n                <div onClick={() => connect()} className=\"menu-icon\">Connect To Wallet</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\n\nimport Routes from \"./components/Routes.js\";\nimport Header from \"./components/Header\";\n\nimport './style/App.css';\n\n\nconst App = () => {\n\n  return (\n        \n    <Container fluid>\n      {/* <Favicon/> */}\n      <Router>\n          <Header/>\n          {/* <TickerComponent/> */}\n          <Routes/>\n          {/* <Footer/> */}\n      </Router>\n    </Container>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}